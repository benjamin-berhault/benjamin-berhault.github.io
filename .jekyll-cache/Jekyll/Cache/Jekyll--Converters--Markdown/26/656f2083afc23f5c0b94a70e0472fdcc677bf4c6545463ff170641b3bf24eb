I"~2<div class="row">
  <div class="col grid s12 m6 l3">
    <img src="/images/dark_wiki.png" class="responsive-img" />
  </div>
  <div class="col grid s12 m6 l9 ">
    It does not matter whether you are employed in a real estate company or a restaurant. Every company needs a wiki. A wiki is a tool for managing knowledge. And as a manager you will want to perpetuate and promote the rapid transmission of knowledge among collaborators, so you will need an operational manual aka wiki. A wiki is critical for competitive business but it is also incredibly useful for an individual to manage and organize knowledge.<br />
      <br />
  In short, whether you are a company or an individual wishing to manage a knowledge a wiki is the tool you have to have.<br />
      <br />
    Here, we'll see how to install MediaWiki on RHEL/CentOS 7 supported by PostgreSQL and Apache that makes it working like a charm.
  </div>
</div>

<h4 id="page-content">Page content</h4>
<div style="padding-left: 30px">
<a href="#mediawiki_prerequisites">MediaWiki Prerequisites</a>
  <div style="padding-left: 30px">
    &minus; <a href="#install_postgresql">Install PostgreSQL 10 on CentOS 7</a><br />
        &minus; <a href="#install_latest_php">Install the latest PHP</a>
    </div>
<a href="#install_mediawiki">Install MediaWiki</a>
</div>

<p><span id="mediawiki_prerequisites"></span></p>
<h2 id="mediawiki-prerequisites">MediaWiki Prerequisites</h2>
<p><span id="install_postgresql"></span></p>
<h3 id="install-postgresql-10-on-centos-7">Install PostgreSQL 10 on CentOS 7</h3>
<p><b>Repo:</b> <a href="https://yum.postgresql.org/10/redhat/rhel-7-x86_64/">https://yum.postgresql.org/10/redhat/rhel-7-x86_64/</a></p>

<p>Install PostgreSQL repository in your system</p>
<pre><code class="language-bash">sudo rpm -Uvh https://yum.postgresql.org/10/redhat/rhel-7-x86_64/pgdg-centos10-10-2.noarch.rpm
</code></pre>

<p>Install PostgreSQL server &amp; development shared library</p>
<pre><code class="language-bash">sudo yum install postgresql10-server postgresql10 postgresql10-devel
</code></pre>

<p>Initialize it before using for the first time.</p>
<pre><code class="language-bash">/usr/pgsql-10/bin/postgresql-10-setup initdb
</code></pre>

<p>By default, PostgreSQL does not allow password authentication. We will change that by editing its hostbased authentication (HBA) configuration.</p>

<p>Open the HBA configuration with your favorite text editor.</p>
<pre><code class="language-bash">sudo vi /var/lib/pgsql/10/data/pg_hba.conf
</code></pre>

<p>Edit the corresponding lines to have:</p>
<pre><code class="language-bash">host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
</code></pre>

<p>Save and exit. PostgreSQL is now configured to allow password authentication.</p>

<h4 id="start-postgresql-server">Start PostgreSQL server</h4>
<p>To start PostgreSQL service, run:</p>
<pre><code class="language-bash">systemctl start postgresql-10
</code></pre>

<p>To enable PostgreSQL on system startup, run:</p>
<pre><code class="language-bash">systemctl enable postgresql-10
</code></pre>

<p>To check the status of PostgreSQL service, run:</p>
<pre><code class="language-bash">systemctl status postgresql-10
</code></pre>

<h4 id="postgresql-setup">PostgreSQL setup</h4>
<p>we’ll create a database named wikidb, owned by a user named wikiuser. From the command-line, as the postgres user</p>
<pre><code class="language-bash">sudo -i -u postgres
</code></pre>

<p>… perform the following steps.</p>
<pre><code class="language-bash">createuser -S -D -R -P -E wikiuser 
# (then enter the password)
createdb -O wikiuser wikidb
</code></pre>

<ul>
  <li><code>-S</code> The new user will not be a superuser. This is the default.</li>
  <li><code>-D</code> The new user will not be allowed to create databases. This is the default.</li>
  <li><code>-R</code> The new user will not be allowed to create new roles. This is the default.</li>
  <li><code>-P</code> If given, createuser will issue a prompt for the password of the new user. This is not necessary if you do not plan on using password authentication.</li>
  <li><code>-E</code> Encrypts the user’s password stored in the database. If not specified, the default password behavior is used.</li>
</ul>

<p><span id="install_latest_php"></span></p>
<h3 id="install-the-latest-php">Install the latest PHP</h3>
<h4 id="install-remi-repository">Install Remi repository</h4>
<p><b>Source:</b> <a href="https://www.if-not-true-then-false.com/2010/install-apache-php-on-fedora-centos-red-hat-rhel">https://www.if-not-true-then-false.com/2010/install-apache-php-on-fedora-centos-red-hat-rhel</a></p>

<p>Before we can actually install Remi Dependency, we need to enable the EPEL repository first. In Fedora it should be enabled by default, but under RHEL/CentOS 7 you will need to do:</p>
<pre><code class="language-bash"># Install epel-release rpm
sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
# Install epel-release rpm package
sudo yum install epel-release
# Install remi-release rpm
sudo rpm -Uvh http://rpms.famillecollet.com/enterprise/remi-release-7.rpm
# Install remi-release rpm package
sudo yum --enablerepo=remi install remi-release
</code></pre>

<h4 id="install-apache-httpd-web-server-and-php">Install Apache (httpd) Web server and PHP</h4>
<p>Remi will not enabled by default, when you need it just do</p>
<pre><code class="language-bash">sudo yum --enablerepo=remi,remi-php72 install httpd php php-common
sudo systemctl restart httpd.service
</code></pre>

<h4 id="install-php-modules">Install PHP modules</h4>
<ul>
  <li><b>OPcache (php-opcache)</b> – The Zend OPcache provides faster PHP execution through opcode caching and optimization.</li>
  <li><b>APCu (php-pecl-apcu)</b> – APCu userland caching</li>
  <li><b>CLI (php-cli)</b> – Command-line interface for PHP</li>
  <li><b>PEAR (php-pear)</b> – PHP Extension and Application Repository framework</li>
  <li><b>PDO (php-pdo)</b> – A database access abstraction module for PHP applications</li>
  <li><b>MySQL (php-mysqlnd)</b> – A module for PHP applications that use MySQL databases</li>
  <li><b>PostgreSQL (php-pgsql)</b> – A PostgreSQL database module for PHP</li>
  <li><b>MongoDB (php-pecl-mongodb)</b> – PHP MongoDB database driver</li>
  <li><b>Redis (php-pecl-redis)</b> – Extension for communicating with the Redis key-value store</li>
  <li><b>Memcache (php-pecl-memcache)</b> – Extension to work with the Memcached caching daemon</li>
  <li><b>Memcached (php-pecl-memcached)</b> – Extension to work with the Memcached caching daemon</li>
  <li><b>GD (php-gd)</b> – A module for PHP applications for using the gd graphics library</li>
  <li><b>XML (php-xml)</b> – A module for PHP applications which use XML</li>
  <li><b>MBString (php-mbstring)</b> – A module for PHP applications which need multi-byte string handling</li>
  <li><b>MCrypt (php-mcrypt)</b> – Standard PHP module provides mcrypt library support</li>
</ul>

<pre><code class="language-bash">sudo yum --enablerepo=remi,remi-php72 install php-pecl-apcu php-cli php-pear php-pdo php-mysqlnd php-pgsql php-pecl-mongodb php-pecl-memcache php-pecl-memcached php-gd php-mbstring php-mcrypt php-xml
sudo systemctl restart postgresql-10
</code></pre>

<h4 id="start-apache-http-server-httpd-and-autostart-apache-http-server-httpd-on-boot">Start Apache HTTP server (httpd) and autostart Apache HTTP server (httpd) on boot</h4>
<pre><code class="language-bash">sudo systemctl start httpd ## use restart after update
sudo systemctl enable httpd
</code></pre>

<h4 id="create-test-php-page-to-check-that-apache-php-and-php-modules-are-working">Create test PHP page to check that Apache, PHP and PHP modules are working</h4>

<p>Give to your current user read write access</p>
<pre><code>sudo setfacl -Rm u:username:rwx /var/www
</code></pre>

<p>Edit a <code>test.php</code> page</p>
<pre><code class="language-bash">vi /var/www/html/index.php
</code></pre>

<p>Add to that file a <code>phpinfo()</code> function to check your PHP settings.</p>
<pre><code class="language-php">&lt;?php
    phpinfo();
</code></pre>

<p>Open the page <a href="http://localhost/test.php">http://localhost/test.php</a> to see the result.
If you encounter a <b>403 error message</b>, read the below section.</p>

<h4 id="allow-access-to-the-web-server">Allow access to the web server</h4>
<p><b>Source:</b> <a href="https://www.security-helpzone.com/2017/02/20/centos-7-apache-2-4-resoudre-acces-403-forbidden/">https://www.security-helpzone.com/2017/02/20/centos-7-apache-2-4-resoudre-acces-403-forbidden/</a></p>

<p>By default SELinux prevented Apache from serving my files, even in read mode: hence a 403 error, forbidden access.</p>

<p>When you have finished installing Apache, ensures apache (through the apache group) has read-write access.</p>

<pre><code class="language-bash">sudo chown -R apache:apache /var/www ## chown defines who owns the file
</code></pre>

<p>Modify permissions a little bit to ensure that read access is permitted to the general web directory, and all of the files and folders inside, so that pages can be served correctly</p>
<pre><code class="language-bash">cd /var/www/html
## chmod defines who can do what
sudo find . -type d -exec chmod 0755 {} \;
sudo find . -type f -exec chmod 0644 {} \;
</code></pre>

<p>SELinux protects web services, check if SELinux is enabled.</p>
<pre><code class="language-bash">sestatus
</code></pre>

<p>If SELinux is in “enforce” mode, then SELinux is enabled. To see if it’s a problem, turn it off, and then retest your URL.</p>
<pre><code class="language-bash">sudo setenforce 0
</code></pre>

<p>If it works, allow Apache to serve web content:</p>
<pre><code class="language-bash">sudo chcon -R -t httpd_sys_rw_content_t /var/www/
</code></pre>

<p>Enable SELinux again.</p>
<pre><code class="language-bash">sudo setenforce 1
</code></pre>

<h4 id="enable-remote-connection-to-apache-http-server-httpd">Enable Remote Connection to Apache HTTP Server (httpd)</h4>
<p>To enable remote connection to Apache HTTP Server (httpd) open web server port (80) on Iptables Firewall. Follow the 2. from <a href="https://www.if-not-true-then-false.com/2010/install-apache-php-on-fedora-centos-red-hat-rhel/">https://www.if-not-true-then-false.com/2010/install-apache-php-on-fedora-centos-red-hat-rhel/</a></p>

<p><span id="install_mediawiki"></span></p>
<h2 id="install-mediawiki">Install MediaWiki</h2>
<p>Check the MediaWiki version you want to install: <a href="https://releases.wikimedia.org/mediawiki">https://releases.wikimedia.org/mediawiki</a></p>

<p>Download MediaWiki.</p>
<pre><code class="language-bash">cd ~/Downloads
wget https://releases.wikimedia.org/mediawiki/1.32/mediawiki-1.32.2.tar.gz
</code></pre>

<p>Unpack the package.</p>
<pre><code class="language-bash">tar xzf mediawiki-1.32.2.tar.gz
</code></pre>

<p>Move MediaWiki files to your webroot directory <code>/var/www/html</code></p>
<pre><code class="language-bash">mkdir /var/www/html/mediawiki
mv mediawiki-1.31.0-rc.0/* /var/www/html/mediawiki
</code></pre>

<h4 id="permit-php-to-connect-to-postgresql">Permit PHP to connect to PostgreSQL</h4>
<p><b>Source:</b> <a href="https://stackoverflow.com/questions/27749691/php-cant-connect-to-postgresql-on-centos-7">https://stackoverflow.com/questions/27749691/php-cant-connect-to-postgresql-on-centos-7</a></p>

<p>SELinux could block your database connection.</p>

<p>Make sure that you set the correct boolean to allow your web application to talk to the database:</p>
<pre><code class="language-bash">sudo setsebool -P httpd_can_network_connect_db 1
</code></pre>

<h4 id="setup-file-uploads-permissions">Setup file uploads permissions</h4>
<p><b>Reference:</b> <a href="https://www.mediawiki.org/wiki/Manual:Configuring_file_uploads">https://www.mediawiki.org/wiki/Manual:Configuring_file_uploads</a></p>

<p>The following needs to be set in php.ini:</p>
<pre><code class="language-bash">file_uploads = On
</code></pre>

<p>Set in LocalSettings.php, <code>$wgEnableUploads</code> to <code>true</code>:</p>
<pre><code class="language-php">$wgEnableUploads = true; # Enable uploads
</code></pre>

<p><b>Source:</b> <a href="https://unix.stackexchange.com/questions/179389/mediawiki-error-file-upload-not-working">https://unix.stackexchange.com/questions/179389/mediawiki-error-file-upload-not-working</a></p>

<p>And set the proper security context type so that SELinux stops complaining.</p>
<pre><code class="language-bash">sudo chcon -R -t httpd_sys_script_rw_t /var/www/html/wiki/images/
</code></pre>

<p>Don’t forget to set the directory back to the correct permissions.</p>
<pre><code class="language-bash">sudo chmod 755 /var/www/html/wiki/images/
</code></pre>

<p>If I missed something, please let me know!</p>
:ET