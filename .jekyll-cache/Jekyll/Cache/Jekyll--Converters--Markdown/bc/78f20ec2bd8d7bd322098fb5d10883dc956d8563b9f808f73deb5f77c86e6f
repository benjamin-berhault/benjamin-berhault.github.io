I"â(<div class="row">
  <div class="col grid s12 m6 l3">
    <center><img src="/images/postgresql.png" class="responsive-img" /></center>
  </div>
  <div class="col grid s12 m6 l9 ">
    For different reasons, you could have the needs to have a relational database management system with an extensible amount of space on your personnal laptop. For that purpose PostgreSQL can be a good candidate. The problem with a regular PostgreSQL installation on RHEL/CentOS 7 is that you will end up to install it on your root partition that is by default not made to handle a big amount of data. Having no extra device to store this data I just want PostgreSQL data being host on my home partition where I have lot of space.
  </div>
</div>

<ul class="collapsible no_bullets">
  <li>
    <div class="collapsible-header blue lighten-2">
      <i class="material-icons">touch_app</i>Click here for a backup procedure of an existing previous version of a PostgreSQL database.
    </div>
    <div class="collapsible-body">
      <span>

<h3>Backup your entire PostgreSQL cluster</h3>
<b>Source:</b><br />
<ul>
  <li>https://clintdunn.org/content/content/details/postgresql-custom-directory/</li>
  <li>https://severalnines.com/blog/using-pgdump-and-pgdumpall-backup-postgresql</li>
</ul>
<br />

You may have a PostgreSQL installation that you want to backup.<br />
For that purpose, first give to your <code>postgres</code> user permissions on the directory where you want to save the backup your database:
<pre class="language-console"><code class="language-console">
setfacl -R -m u:postgres:rwx /my/backup/folder/
</code></pre>

Back up your data in a `entire_cluster.sql` file:
<pre class="language-console"><code class="language-console">
sudo su - posgres
pg_dumpall -U postgres -W -f /my/backup/folder/entire_cluster.sql
</code></pre>

With that command you will have to enter your password as many time you have databases.

<h3>Remove a previous PostgreSQL installation</h3>

Stop your Postgres installtion
<pre class="language-console"><code class="language-console">
sudo systemctl stop postgresql-XX
</code></pre>

Keep for instance your previous PostgreSQL installation file system by renaming the root folder.
<pre class="language-console"><code class="language-console">
mv /var/lib/pgsql /var/lib/old.pgsql
</code></pre>

Remove existing PostgreSQL yum repositories <b>and take notes of affected dependencies you will have to reinstall afterwards</b>.
<pre class="language-console"><code class="language-console">
sudo yum remove postgresql*
</code></pre>

  </span>
    </div>
  </li>
</ul>

<h2 id="install-postgresql-11-on-rhelcentos-7">Install PostgreSQL 11 on RHEL/CentOS 7</h2>
<p><b>Source:</b> <a href="https://pgstef.github.io/2018/02/28/custom_pgdata_with_systemd.html">Custom PGDATA with systemd</a></p>

<p>By default on CentOS 7, the PostgreSQL v11 data directory is <code>/var/lib/pgsql/11/data</code>. Weâ€™ll see here how to host the PostgreSQL data directory on your <code>/home</code> partition.</p>

<p>Add to your system the last PostgreSQL Yum repository.</p>
<pre><code class="language-bash">sudo rpm -Uvh https://yum.postgresql.org/11/redhat/rhel-7-x86_64/pgdg-centos11-11-2.noarch.rpm
</code></pre>

<p>..to install PostgreSQL server and development shared libraries.</p>
<pre><code class="language-bash">sudo yum install postgresql11-server postgresql11 postgresql11-devel postgresql11-contrib
</code></pre>

<p>Create a new directory in your <code>/home</code> directory and give to the postgres user permissions and ownership to it:</p>
<pre><code class="language-bash">sudo mkdir -p /home/pgdata/11/data
sudo chown -R postgres:postgres /home/pgdata
</code></pre>

<p>Edit the postgresql-11.service file to specify where the systemd service will find PostgreSQL data.</p>
<pre><code class="language-bash">sudo vi /usr/lib/systemd/system/postgresql-11.service
</code></pre>

<p>Change the following line</p>
<pre><code class="language-bash">Environment=PGDATA=#####################
</code></pre>

<p>by this one:</p>
<pre><code class="language-bash">Environment=PGDATA=/home/pgdata/11/data/
</code></pre>

<p>Reload systemd:</p>
<pre><code class="language-bash">sudo systemctl daemon-reload
</code></pre>

<p>With PostgreSQL just installed, you have to initialize it.</p>
<pre><code class="language-bash">sudo /usr/pgsql-11/bin/postgresql-11-setup initdb
</code></pre>

<p>By default, PostgreSQL does not allow password authentication. We will change that by editing its hostbased authentication (HBA) configuration.</p>

<p>Open the HBA configuration with your favorite text editor.</p>
<pre><code class="language-bash">sudo vi /home/pgdata/11/data/pg_hba.conf
</code></pre>

<pre><code class="language-bash">host    all             all             127.0.0.1/32            md5
host    all             all             ::1/128                 md5
</code></pre>

<p>Save and exit. PostgreSQL is now configured to allow password authentication.</p>

<p>Start and enable the service:</p>

<p>To start PostgreSQL service, run:</p>
<pre><code class="language-bash">sudo systemctl start postgresql-11
</code></pre>

<p>To enable PostgreSQL on system startup, run:</p>
<pre><code class="language-bash">sudo systemctl enable postgresql-11
</code></pre>

<p>To check the status of PostgreSQL service, run:</p>
<pre><code class="language-bash">systemctl status postgresql-11
</code></pre>

<p>And Voila! Itâ€™s just that simple.</p>

<p>This article has been improved thanks to @darixzen: https://discourse.nordisch.org/t/epmd-and-systemd/434.</p>

<h2 id="restoring-a-backup">Restoring a backup</h2>
<p>Create a folder from where the postgres user will have access to the backup file.</p>
<pre><code class="language-bash">sudo mkdir -p /var/www/dmz
</code></pre>

<p>Give Read/Write access to all users</p>
<pre><code class="language-bash">sudo chmod -R 757 /var/www/dmz
</code></pre>

<p>Import in it your backup file.</p>

<p>Restore your database with this file.</p>
<pre><code class="language-bash">sudo su - postgres
psql -U postgres -f /var/www/dmz/entire_cluster.sql
</code></pre>

<h2 id="postgres-user-password">Postgres user password</h2>
<p><b>Source:</b> https://stackoverflow.com/questions/11845998/i-forgot-the-password-i-entered-during-postgres-installation
If you lost your postgres user password, you can change that way</p>

<p>Find your file pg_hba.conf.</p>
<pre><code class="language-console">find / -name pg_hba.conf
</code></pre>

<p>Edit it</p>
<pre><code class="language-console">sudo vi /my/path/to/pg_hba.conf
</code></pre>
<p>Change</p>
<pre><code class="language-console">local  all   all   xxxx
</code></pre>
<p>to</p>
<pre><code class="language-console">local  all   all   trust
</code></pre>
<p>restart your PostgreSQL server</p>
<pre><code class="language-console">sudo systemctl restart postgresql-11
</code></pre>

<p>Connect as the superuser postgres</p>
<pre><code class="language-console">psql -U postgres
</code></pre>

<p>Reset postgres password</p>
<pre><code class="language-console">ALTER USER postgres with password 'my_secure_password';
</code></pre>

<p>Change back your pg_hba.conf</p>
<pre><code class="language-console">sudo vi /my/path/to/pg_hba.conf
</code></pre>
<p>Change</p>
<pre><code class="language-console">local  all   all  trust
</code></pre>
<p>to</p>
<pre><code class="language-console">local  all   all   xxxx
</code></pre>

<p>restart your PostgreSQL server</p>
<pre><code class="language-console">sudo systemctl restart postgresql-11
</code></pre>

<h2 id="install-pgadmin-4">Install pgAdmin 4</h2>

<ul>
  <li>Reference: https://github.com/postgres/pgadmin4</li>
  <li>Source: To install pgAdmin 4 standalone in a runtime environment</li>
</ul>

<p>Download the Python wheel for the last pgAdmin release from this page : https://www.pgadmin.org/download/pgadmin-4-python-wheel/</p>
<pre><code class="language-console">cd ~/Downloads
wget https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v4.3/pip/pgadmin4-4.3-py2.py3-none-any.whl
</code></pre>

<p>The pgAdmin 4 team advice to use a virtual environment for the installation. Therefore, we will install virtualenv with pip and set it up to use with Python3. (conda ref: https://conda.io/docs/user-guide/tasks/manage-environments.html)</p>

<p>Create a Python 3.5 environment</p>
<pre><code class="language-console">conda create -n pgadmin4 python=3.5
</code></pre>

<p>Activate your new environment</p>
<pre><code class="language-console">source activate pgadmin4
</code></pre>

<p>Install the Python wheel</p>
<pre><code class="language-console">pip install pgadmin4-4.3-py2.py3-none-any.whl
</code></pre>

<p>Check the location of your pgAdmin4</p>

<p>Building the Runtime</p>
<pre><code class="language-console">find / -name pgAdmin4.py
</code></pre>

<p>It will return something like</p>
<pre><code>/home/username/anaconda3/envs/pgadmin4/lib/python3.5/site-packages/pgadmin4/pgAdmin4.py
</code></pre>

<p>Edit a config_local.py in the same directory</p>
<pre><code>vi /home/benjamin/anaconda3/envs/pgadmin4/lib/python3.5/site-packages/pgadmin4/config_local.py
</code></pre>

<p>Insert (<code>i</code>) the following content</p>
<pre><code>import os
DATA_DIR = os.path.realpath(os.path.expanduser(u'~/.pgadmin/'))
LOG_FILE = os.path.join(DATA_DIR, 'pgadmin4.log')
SQLITE_PATH = os.path.join(DATA_DIR, 'pgadmin4.db')
SESSION_DB_PATH = os.path.join(DATA_DIR, 'sessions') 
STORAGE_DIR = os.path.join(DATA_DIR, 'storage')
SERVER_MODE = False
</code></pre>

<p>Save and close it (<code>:wq</code>).</p>

<p>Run pgAdmin 4</p>
<pre><code>python $(python -c "from distutils.sysconfig import get_python_lib; print(get_python_lib() + '/pgadmin4/pgAdmin4.py')")
</code></pre>

<h2 id="create-a-shortcut">Create a shortcut</h2>
<pre><code>mkdir ~/.shortcuts
touch ~/.shortcuts/pgadmin4
chmod +x ~/.shortcuts/pgadmin4
</code></pre>

<p>Edit the pgadmin4 file</p>
<pre><code>vi ~/.shortcuts/pgadmin4
</code></pre>

<p>with the following content</p>
<pre><code>#!/bin/bash
source activate pgadmin4
python /home/username/anaconda3/envs/pgadmin4/lib/python3.5/site-packages/pgadmin4/pgAdmin4.py
</code></pre>

<p>Add to your <code>~/.bashrc</code> file</p>
<pre><code>export PATH="/home/benjamin/.shortcuts:$PATH"
</code></pre>

<p>You will now be able to launch pgAdmin 4 just with the <code>pgadmin4</code> command.</p>

<h2 id="check-your-configuration">Check your configuration</h2>

<pre><code class="language-sql">SHOW work_mem ;
</code></pre>
:ET