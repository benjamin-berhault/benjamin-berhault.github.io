I"Åë<div class="row">
  <div class="col grid s12 m6 l3">
    <img src="/images/vocabulary.png" class="responsive-img" />
  </div>
  <div class="col grid s12 m6 l9 ">
  	<b>Source:</b> <a href="https://code.tutsplus.com/tutorials/create-a-algorithm-trading-robot-the-basics-of-writing-a-expert-advisor-in-mql4--cms-27984">Create an Algorithm Trading Robot: The Basics of Writing An Expert Advisor in MQL4</a><br />
    Far too often, emotions, psychological mind traps and mental discipline stand in the way of profits and are the main reasons 95% (or more) of all new traders lose all their investment capital in the first month. <br />
    <br />
  	Using an Expert Advisor algorithm trading robot in Meta Trader written in the MQL4 language is one way of accessing the market via code, thus taking the emotions out of the picture and working with just the numbers and your program logic. <br />
  	<br />
  	Taking emotions out of the equation is one measure, but this does not mean robots cannot lose. In fact, even the big investment banks have had to pull the plug on their trading robots before the loss became fatal. 
  </div>
</div>

<h2 id="historical-data-feed">Historical Data Feed</h2>
<p><a href="https://www.dukascopy.com/swiss/english/marketwatch/historical/">www.dukascopy.com - Historical Data Feed</a></p>

<h2 id="champs-de-recherche">Champs de recherche</h2>

<p>Pr√©dire en amont:</p>
<ul>
  <li>la tendance √† venir</li>
  <li>la stabilit√© de la tendance</li>
  <li>la dur√©e de la tendance</li>
</ul>

<h2 id="pre-requisites">Pre requisites</h2>

<ul>
  <li>[XTB] <a href="https://www.xtb.com/fr/formation-trading/configuration-de-base">MT4: Configuration de base</a></li>
  <li>[YouTube] <a href="https://www.youtube.com/watch?v=K5BuvoKgaF4">How to connect your Broker account to Metatrader4</a></li>
</ul>

<h2 id="basics">Basics</h2>

<p>An <b>account balance</b> is the amount of money in a financial repository, such as a savings or checking account, at any given moment.</p>

<p>A <b>tick</b> is an event that is characterized by a new price of the symbol at some instant.</p>

<p>A <b>bar</b> is a graphical representation of the price movement of a financial instrument that contains the open, high, low and closing prices for a set period of time or a specified set of data.</p>

<p>An <b>Expert Advisor (EA)</b> does not work continuously all the time. An EA is usually launched at the moment when a new tick comes. For this reason, we do not characterize tick as just a new quote, but as an event to be processed by the client terminal.</p>
<div class="row">
  <div class="col s12 m4 l6">
    <b>Ask price</b> - The ask price represents the minimum price that a seller is willing to receive. <br />
      <br />
    <b>Bid price</b> - The bid price represents the maximum price that a buyer is willing to pay for a security.
  </div>
  <div class="col s12 m8 l6">
    <img src="/images/06-mql5-notebook/04-mql5-notebook.png" class="responsive-img" />
  </div>
</div>

<p>A <b>spread</b> is the difference between the bid and the ask price of a security or asset</p>

<p><b>Slippage</b> refers to the difference between the expected price of a trade and the price at which the trade is actually executed.</p>

<div class="row">
  <div class="col s12 m4 l6">
    <b>Currency pair</b> - The quotation EUR/USD 1.2500 means that 1 euro is exchange for 1.2500 US dollars. Here, EUR is the base currency and USD is the quote currency.
  </div>
  <div class="col s12 m8 l6 center">
    <img src="/images/06-mql5-notebook/03-mql5-notebook.png" class="responsive-img" />
  </div>
</div>

<p><b>Lots</b> - In the past, spot forex was only traded in specific amounts called lots, or basically the number of currency units you will buy or sell.</p>

<p>ref : https://www.youtube.com/watch?v=6bR5dJZz_9M</p>

<ul>
  <li>0.01 = 1 cent per pip meaning everytime the market move one pip you lose or win 1 cent</li>
  <li>0.10 = 0.1 dollar movement</li>
  <li>1.00 = 1 dollar movement</li>
</ul>

<p>Let‚Äôs say you want 60 pips stop loss and 1% risk of your 50000$ account. Meaning you do not risk more money than $500.</p>

<p>And that we are risking $500 / 60 pips = $8.33 / pip meaning you lose or win 
$8.33 per pip.</p>

<p>So what is a lot size risking $8.33 per pip.</p>

<p>USD pairs always equals tp $10 / lot / pip meaning our volume be 0.83</p>

<p><b>Account balance</b> is the balance not including the floating profit/loss from any open trades.</p>

<p><b>Equity</b> is the account balance plus or minus the floating profit/loss from any open trades:</p>

<script type="math/tex; mode=display">Equity = Balance + Floating Profit/Loss</script>

<p><b>Margin</b> - In forex, to control a $100,000 position, your broker will set aside $1,000 from your account. Your leverage, which is expressed in ratios, is now 100:1. You‚Äôre now controlling $100,000 with $1,000. The $1,000 deposit is ‚Äúmargin‚Äù you had to give in order to use leverage.</p>

<p><b>Free margin</b> is the equity minus the margin used for open trades.</p>

<p>A <b>swap/rollover fee</b> is charged when you keep a position open overnight. 
swap is the interest paid at the time of rollover</p>

<p><b>Moving average (MA)</b> helps smooth out price action by filtering out the ‚Äúnoise‚Äù from random price fluctuations. The most common applications of moving averages are to identify the trend direction, and to determine support and resistance levels. The two basic and commonly used moving averages are:</p>
<ul>
  <li><b>Simple moving average (SMA)</b>, which is the simple average of a security over a defined number of time periods.</li>
  <li><b>exponential moving average (EMA)</b>, which gives greater weight to more recent prices.</li>
</ul>

<p><b>Moving average convergence divergence (MACD)</b> is an indicator that shows the relationship between two moving averages of prices. It  is one of the simplest and most effective momentum indicators available. With it we usually compute:</p>

<div class="row">
  <div class="col s12 m4 l6">
    <ul>
      <li>MACD Line: <code>(12-day EMA - 26-day EMA)</code></li>
      <li>Signal Line: <code>9-day EMA of MACD Line</code></li>
      <li>MACD Histogram: <code>MACD Line - Signal Line</code></li>
    </ul>
  </div>
  <div class="col s12 m8 l6 center">
    <img src="/images/06-mql5-notebook/05-mql5-notebook.png" class="responsive-img" />
  </div>
</div>

<ul>
  <li>Long term trading = position rading = swing trading : last days or weeks</li>
  <li>short term trading = daily trading : last around 10 minutes to 1 day</li>
</ul>

<p><b>Order types</b> - Trades can be entered in two different directions, depending on where you expect the market to go.</p>

<ul>
  <li>
    <p><b>Long trades</b> are the classic method of buying with the intention of profiting from a rising market. All brokers support long trades and you won‚Äôt need a margin account ‚Äì assuming you have the funds to cover the trade. <b>(Long Trade = Profit from a rising market)</b></p>
  </li>
  <li>
    <p><b>Short trades</b>, on the other hand, are entered with the intention of profiting from a falling market. Once price reaches your target level, you buy back the shares (or buy to cover) to replace what you originally borrowed from your broker. <b>(Short Trade = Profit from a falling market)</b></p>
  </li>
</ul>

<div class="row">
  <div class="col s12 m6 l6">
A <b>Bollinger Band</b> is a set of lines plotted two standard deviations (positively and negatively) away from a moving average (simple moving average, exponential moving averages, ...). When stock prices continually touch the upper Bollinger Band, the prices are thought to be overbought; conversely, when they continually touch the lower band, prices are thought to be oversold, triggering a buy signal.
  </div>
  <div class="col s12 m6 l6 center">
    <img src="/images/06-mql5-notebook/06-mql5-notebook.png" class="responsive-img" />
  </div>
</div>

<p>The <b>Relative Strength Index (RSI)</b> is a momentum indicator that measures the magnitude of recent price changes to analyze overbought or oversold conditions. It is primarily used to attempt to identify overbought (upper 70) or oversold (below 30) conditions in the trading of an asset.</p>
<div class="row">
  <div class="col s12 m6 l6">
$$RSI = 100 - 100 / (1 + RS)$$

Where RS = Average gain of up periods during the specified time frame / Average loss of down periods during the specified time frame<br />
<br />
The RSI provides a relative evaluation of the strength of a security's recent price performance, thus making it a momentum indicator. RSI values range from 0 to 100. The default time frame for comparing up periods to down periods is 14.
  </div>
  <div class="col s12 m6 l6 center">
    <img src="/images/06-mql5-notebook/07-mql5-notebook.png" class="responsive-img" />
  </div>
</div>

<div class="row">
  <div class="col s12 m6 l6">
The <b>momentum</b> and <b>rate of change</b> indicators show trend by remaining positive while an uptrend is sustained, or negative while a downtrend is sustained. <br />
<br />
$$rate\,of\,change = \frac{close_{today} - close_{N\,days\,ago}}{close_{N\,days\,ago}}$$
  </div>
  <div class="col s12 m6 l6 center">
    <img src="/images/06-mql5-notebook/08-mql5-notebook.png" class="responsive-img" />
  </div>
</div>

<div class="row">
  <div class="col s12 m6 l6">
The <b>parabolic SAR</b> is a technical indicator used to determine the price direction of an asset, as well draw attention to when the price direction is changing. Sometimes known as the "stop and reversal system," the parabolic SAR was developed by Welles Wilder, creator of the relative strength index (RSI). <br />
<br />
On a chart, the indicator appears as a series of dots placed either above or below the price bars. A dot below the price is deemed to be a bullish signal. Conversely, a dot above the price is used to illustrate that the bears are in control and that the momentum is likely to remain downward. When the dots flip, it indicates that a potential change in price direction is under way.
  </div>
  <div class="col s12 m6 l6 center">
    <img src="/images/06-mql5-notebook/09-mql5-notebook.png" class="responsive-img" />
  </div>
</div>

<div class="row">
  <div class="col s12 m6 l6">
The <b>Williams %R</b>, also known as the Williams Percent Range, is a type of momentum indicator that moves between 0 and -100 and measures overbought and oversold levels. The Williams %R is commonly used to find entry and exit points in the market. It is, however, prone to false signals as it moves between overbought and oversold. For that reason, using the indicator alongside other price and trend methodologies can help mitigate some of the false signals.

$$\%R = \frac{(highest\,high - closing\,price)}{(highest\,high-lowest\,low}\times -100$$
  </div>
  <div class="col s12 m6 l6 center">
    <img src="/images/06-mql5-notebook/10-mql5-notebook.png" class="responsive-img" />
  </div>
</div>
<p>The Williams %R, developed by publisher Larry Williams, is a technical analysis oscillator. In practice, it compares a stock‚Äôs closing price to the high-low range over a specific period, typically 14 days.</p>

<p>The Williams %R gained notoriety as an indicator because of its penchant for signaling market reversals at least one or two points in the future. Anticipating when market reversals may occur is invaluable for analysts and traders, as is having a way to determine overbought and oversold market conditions. A security is overbought when the indicator is above -20, and the security is oversold if the indicator is below -80.</p>

<p>The <b>average true range (ATM)</b> indicator does not provide an indication of price trend, simply the degree of price volatility over a defined period, generally 14 days.</p>

<p>The <b>volume-weighted average price (VWAP)</b> is the ratio of the value traded to total volume traded over a particular time horizon (usually one day)</p>

<script type="math/tex; mode=display">P_{\mathrm{VWAP}} = \frac{\sum_{j}{P_j \cdot Q_j}}{\sum_j{Q_j}} \,</script>

<p>where:</p>
<ul>
  <li><script type="math/tex">P_{\mathrm{VWAP}}</script> is Volume Weighted Average Price;</li>
  <li><script type="math/tex">P_j</script> is price of trade <script type="math/tex">j</script>;</li>
  <li><script type="math/tex">Q_j</script> is quantity of trade <script type="math/tex">j</script>;</li>
  <li><script type="math/tex">j</script> is each individual trade that takes place over the defined period of time, excluding cross trades and basket cross trades.</li>
</ul>

<p><b>Tick charts</b> are based on a certain number of transactions per bar, we can see when the market is most active, or sluggish and barely moving. For example, one bar will print after each 144 transactions (trades that occur) on a 144-tick chart. These transactions include small orders as well as large block orders. Each transaction is counted just once, regardless of the size. More bars will print in periods of high market activity. Conversely, fewer bars will print during periods of low market activity.</p>

<p><b>Tick Imbalance Bars</b></p>

<p><b>Shares outstanding</b> refers to all shares currently owned by stockholders, company officials, and investors in the public domain, but does not include shares repurchased by a company.</p>

<p><b>Market capitalization</b> (market cap) refers to the total dollar market value of a company‚Äôs outstanding shares.  is the value</p>

<h2 id="metatrader-usage">MetaTrader usage</h2>
<p>The prefix ‚Äò@‚Äô refers to the domain name itself ‚Äì it essentially means no prefix.</p>

<p>The prefix * is a wildcard ‚Äì if a DNS request is made for an address that does not have a specific A record setup, then the wildcard IP address will be returned.</p>

<p>Remove an <b>Expert Advisor</b> for a chart: Right click anywhere on the chart that you have the EA attached to. Select ‚ÄúExpert Advisors‚Äù. Then use the ‚ÄúRemove‚Äù option.</p>

<p>Equity is your account balance plus the floating profit/loss of your open positions:</p>

<p>The standard size for a lot is 100,000 units of currency, and now, there are also a mini, micro, and nano lot sizes that are 10,000, 1,000, and 100 units respectively.</p>

<p>Data types</p>
<ul>
  <li>int (integers)</li>
  <li>double (real numbers)</li>
  <li>bool (Boolean values, that is logical values)</li>
  <li>string (values of string type)</li>
  <li>color (values of color type)
    <pre><code class="language-c">color Paint_1 = C'128,128,128';       // The value of gray   was assigned to the variable
color Colo    = C'0x00,0x00,0xFF';    // The value of blue   was assigned to the variable
color BMP_4   = C'0xFF,0x33,0x00'     // The value of red    was assigned to the variable
color K_12  = 0xFF3300;               // The value of red    was assigned to the variable
color N_3   = 0x008000;               // The value of green  was assigned to the variable
color Color = 16777215;               // The value of white  was assigned to the variable
color Alfa  = 32768;                  // The value of green  was assigned to the variable
color A       = Red;                  // The value of red    was assigned to the variable
color B       = Yellow;               // The value of yellow was assigned to the variable
color Colorit = Black;                // The value of black  was assigned to the variable
color B_21    = White;                // The value of white  was assigned to the variable
</code></pre>
  </li>
  <li>datetime (values of date and time)
    <pre><code class="language-c">datetime Alfa    = D'2004.01.01 00:00';       // New Year
datetime Tim     = D'01.01.2004';             // New Year
datetime Tims    = D'2005.05.12 16:30:45';    // May 12, 2005 4:30:45 p.m.
datetime N_3     = D'12.05.2005 16:30:45';    // May 12, 2005 4:30:45 p.m.
datetime Compile = D'';                       // equivalent of D'[compilation date] 00:00:00'
</code></pre>
  </li>
</ul>

<h4 id="program-structure">Program structure</h4>

<p>A program is usually composed by a <b>head</b> part (general information and declaration and initializatiion of global variables), <b>special functions</b>, <b>user-defined functions</b> and <b>standard functions</b> with the following arrangement:</p>

<p><img src="/images/06-mql5-notebook/01-mql5-notebook.png" class="responsive-img" /></p>

<p>Special functions init() and deinit() can be absent in a program. The order of special functions descriptions in a program does not affect the running order. When a program starts, init() is executed; after that, the main work is performed by start(); and, when a user finishes his work, deinit() will be started prior to the program shutdown.</p>

<h4 id="special-functions">Special functions</h4>

<p><b>init()</b> function is executed at the program initialization. If a program contains the description of the special init() function, it will be called (and executed) at the moment the program starts.</p>

<p><b>start()</b> is called (and executed) immediately after a new tick comes. The start() execution is performed by the client terminal only when the control has been returned to the client terminal, and start() is waiting for a new tick.</p>

<p><b>deinit()</b> function is executed at the program termination (deinitialization). If a program contains a description of deinit(), it will be called (and executed) at the program‚Äôs shutdown. If a program does not contain deinit(), no actions will be performed at program shutdown.</p>

<h4 id="standards-functions">Standards functions</h4>
<p>In input</p>
<ul>
  <li>Events: OnInit(), OnTick()‚Ä¶</li>
  <li>Current values: Bid[0] ‚Ä¶</li>
  <li>Open/Close data orders (OrderSelect/OrdersTotal‚Ä¶)</li>
</ul>

<p>In output</p>
<ul>
  <li>Trades (OrderSend/OrderClose)</li>
</ul>

<p>Example of a function that will be called on every tick of market data:</p>

<pre><code class="language-c">void OnTick()
  {
  	   // on tick bars under 100 or trade is not allowed exit function
       if(Bars&lt;100 || IsTradeAllowed()==false)
          return;
       // Symbol() Returns a text string with the name of the current financial instrument.
       if(CalculateCurrentOrders(Symbol())==0){
          CheckForOpen();
       } else {
          CheckForClose();
       }
  }
</code></pre>

<p><b>Financial instruments</b> are monetary contracts between parties. They can be created, traded, modified and settled. They can be cash (currency), evidence of an ownership interest in an entity (share), or a contractual right to receive or deliver cash (bond).</p>

<h1 id="mql4-tutorial-bootcamp">MQL4 Tutorial Bootcamp</h1>
<p><b>Source:</b>https://www.youtube.com/watch?v=Zki92NdcDT4&amp;list=PLUyWGWYTVAjmj_powFtIM475En4pWqega</p>

<p>You must <b>Allow automated trading</b>, in <b>Tools &gt; Options &gt; Expert Advisors</b>, before you can setup any expert advisor</p>

<p>Push notifications:</p>
<ul>
  <li>On mobile phone: <b>Tools &gt; Options &gt; Notifications &gt; Enable Push Notifications</b></li>
  <li>By mail: Setup a mail <b>Tools &gt; Options &gt; Email</b></li>
</ul>

<p>Disable annoying sounds by unchecking <b>Enable</b> option under <b>Tools &gt; Options &gt; Events</b></p>

<h2 id="predefined-variables">Predefined variables</h2>
<p><b>Reference:</b> <a href="https://docs.mql4.com/predefined">https://docs.mql4.com/predefined</a>
<a href="https://docs.mql4.com/predefined/_symbol"><code>_Symbol</code></a> - contains the symbol name of the current chart.
<a href="https://docs.mql4.com/predefined/_period"><code>_Period</code></a> - value of the timeframe of the current chart.</p>

<h2 id="scripts">Scripts</h2>

<ul>
  <li>TimeToStr()</li>
  <li>iHighest()</li>
  <li>Series Array Identifiers</li>
  <li>Output a variable value on chart</li>
</ul>

<p>Current time to string</p>
<pre><code>TimeToStr(TimeLocal(); TIME_SECONDS);
</code></pre>

<p><code>StringFind</code> - Search for a substring in a string.</p>
<pre><code class="language-c">int  StringFind(
   string  string_value,        // string in which search is made
   string  match_substring,     // what is searched
   int     start_pos=0          // from what position search starts
   );
</code></pre>
<p>Returns position number in a string, from which the searched substring starts, or -1, if the substring is not found.</p>

<p>Example - Calculate the current time</p>
<pre><code>StringFind(CurrentTime,EndOfOpeningPeriod,0)
</code></pre>

<p><a href="https://docs.mql4.com/series/ihighest"><code>iHighest</code></a> - Returns the shift of the maximum value over a specific number of bars depending on type.</p>
<pre><code class="language-c">int  iHighest(
   string           symbol,          // symbol
   int              timeframe,       // timeframe
   int              type,            // timeseries
   int              count,           // cont
   int              start            // start
  );
</code></pre>
<p>Example - find the highest of the last 30 candles</p>
<pre><code>iHighest(_Symbol,_Period,MODE_HIGH,30,0);
</code></pre>

<ul>
  <li>_Symbol - contains the symbol name of the current chart.</li>
  <li>_Period - value of the timeframe of the current chart.</li>
  <li>MODE_HIGH - High price from</li>
</ul>

<p><a href="https://docs.mql4.com/constants/indicatorconstants/seriesconst">Series Array Identifiers</a>
Series array identifier used with ArrayCopySeries(), iHighest() and iLowest() functions. It can be any of the following values:</p>
<ul>
  <li><code>MODE_OPEN</code> - Open price</li>
  <li><code>MODE_LOW</code> - Low price</li>
  <li><code>MODE_HIGH</code> - High price</li>
  <li><code>MODE_CLOSE</code> - Close price</li>
  <li><code>MODE_VOLUME</code> - Volume, used in iLowest() and iHighest() functions</li>
  <li><code>MODE_TIME</code> - Bar open time, used in ArrayCopySeries() function</li>
</ul>

<p>Output a variable value on chart</p>
<pre><code class="language-c">Comment("Current Time: ", CurrentTime);
</code></pre>

<p>Display a rectangular with upper-right and bottom-left chart values</p>
<pre><code class="language-c"> ObjectCreate("Rectangle", OBJ_RECTANGLE, 0, Time[0], High[HighestCandle], Time[30], Low[LowestCandle]);
</code></pre>

<p>Display current Ask price and Bid price</p>
<pre><code class="language-c">Comment("The current Ask price is: ", Ask, " and the Bid price is:", Bid);
</code></pre>

<h2 id="trade-functions"><a href="https://docs.mql4.com/trading">Trade Functions</a></h2>

<h2 id="backtest">Backtest</h2>
<p>Get an html page of your back testing result: from Strategy Tester window, right click and Report &gt; HTML</p>

<h2 id="variables">Variables</h2>
<p><b>input</b> - A variable with the input modifier can‚Äôt be changed inside mql5-programs, such variables can be accessed for reading only.</p>

<p><b>Static variables</b> exist from the moment of program execution and are initialized only once before the specialized functions <code>OnInit()</code> is called. If the initial values are not specified, variables of the static storage class are taking zero initial values.</p>

<p>Local variables declared with the <code>static</code> keyword retain their values throughout the function lifetime. With each next function call, such local variables contain the values that they had during the previous call.</p>

<h2 id="scripts-1">Scripts</h2>

<ul>
  <li>Counting the number of positions for a currency pair</li>
  <li>Check what your broker is charging for swap fees</li>
  <li>Find out which is the highest candle on the chart</li>
  <li>Compute the simple moving average for the last 20 candles</li>
  <li>Compute the Bollinger bands 2 standard deviations over the last 20 candles</li>
  <li>Count the number of new candles</li>
  <li>Compute the current Relative Strength Index (RSI)</li>
  <li>Launch an action when the RSI value is below 30 AND the ASK price is below lower Bollinger Band</li>
</ul>

<p>Counting the number of positions for a currency pair</p>
<pre><code class="language-c++">void OnTick()
{
  int PositionsForThisCurrencyPair=0; // local position-count variable

  for(int i = PositionsTotal()-1; i&gt;=0; i--) // count all currency pair positions
  {
    string symbol=PositionGetSymbol(i);  // get position currency pair symbol
    if(Symbol()==symbol)    // if chart symbol equals position symbol
    {
      PositionsForThisCurrencyPair+= 1;      // add 1 to counter
    }
  }    // end of for loop

  Comment("\n\n Positions for this currency pair: ", PositionsForThisCurrencyPair); // chart text output
}
</code></pre>

<p>Check what your broker is charging for swap fees</p>
<pre><code class="language-c++">  void OnTick()
  {
  double swapLongTrades = SymbolInfoDouble(Symbol(), SYMBOL_SWAP_LONG);
  double swapShortTrades = SymbolInfoDouble(Symbol(), SYMBOL_SWAP_SHORT);

  Comment(
    "Swap Long Trades: ", swapLongTrades, "\n",
    "Swap Short Trades: ", swapShortTrades, "\n"
  );
}
</code></pre>

<p>Find out which is the highest candle on the chart</p>
<pre><code class="language-c++">void OnTick()
{
  double HighestCandleM1;
  double High[];

  // Set the indexing direction for the array 
  ArraySetAsSeries(High,true);
  // Get maximum bar prices for the define range
  CopyHigh(_Symbol, PERIOD_M1, 0, 11, High);
  // Indice de la plus grande valeur trouv√©e
  HighestCandleM1 = ArrayMaximum(High,0,11);

  Comment(
     "Highest candle within the last 10 candles: " + HighestCandleM1);
}
</code></pre>

<p>Compute the simple moving average for the last 20 candles</p>
<pre><code class="language-c++">void OnTick()
{
  // Create an Array for several prices
  double myMovingAverageArray[];
  double myMovingAverageArray2[];

  // MODE_SMA - Simple averaging
  // MODE_EMA - Exponential averaging
  // MODE_SMMA - Smoothed averaging
  // MODE_LWMA - Linear-weighted averaging

  // Define the properties of the Moving Average
  int movingAverageDefinition = iMA (
     _Symbol            // symbol name
     , _Period            // period
     , 20                   // averaging period
     , 0                     // horizontal shift
     , MODE_SMA     // smoothing type
     , PRICE_CLOSE  // type of price or handle
   );
   
  // Sort the price array from the current candle downwards
  ArraySetAsSeries(myMovingAverageArray, true);
  ArraySetAsSeries(myMovingAverageArray2, true);

  // Defined EA, one line, current candle, 3 candles, store result
  CopyBuffer(movingAverageDefinition, 0, 0, 1, myMovingAverageArray);
  CopyBuffer(movingAverageDefinition, 0, 0, 3, myMovingAverageArray2); // actually 0, 0, 2 would be enough 
        
  // Chart output of the current EA
  Comment("Current MovingAverageValue: ", myMovingAverageArray[0], "\n"
     , "Previous MovingAverageValue: ", myMovingAverageArray2[1]);
}
</code></pre>

<p>Compute the Bollinger bands 2 standard deviations over the last 20 candles</p>
<pre><code class="language-c++">void OnTick()
{
  // Create an Array for several prices
  double MiddleBandArray[];
  double UpperBandArray[];
  double LowerBandArray[];

  // sort the price array from the current candle downwards
  ArraySetAsSeries(MiddleBandArray,true);
  ArraySetAsSeries(UpperBandArray,true);
  ArraySetAsSeries(LowerBandArray,true);

  // define Bollinger Bands
  int BollingerBandsDefinition = iBands(
   _Symbol     // symbol name
   , _Period    // period
   , 20           // period for average line calculation
   , 0             // horizontal shift of the indicator
   , 2             // number of standard deviations
   , PRICE_CLOSE  // type of price or handle
  );

  // Copy price info the array
  // cf. doc: The buffer numbers are the following: 0 - BASE_LINE, 1 - UPPER_BAND, 2 - LOWER_BAND
  CopyBuffer(BollingerBandsDefinition,0,0,3,MiddleBandArray);
  CopyBuffer(BollingerBandsDefinition,1,0,3,UpperBandArray);
  CopyBuffer(BollingerBandsDefinition,2,0,3,LowerBandArray);

  // Chart ouput of the current EA
  Comment("My upper band value: ", UpperBandArray[0], "\n",
   "My middle band value: ", MiddleBandArray[0], "\n",
   "My lower band value: ", LowerBandArray[0], "\n"
  );
}
</code></pre>

<p>Count the number of new candles</p>
<pre><code class="language-c++">void OnTick()
{
  // struct MqlRates
  // {
  //    datetime time;         // Period start time
  //    double   open;         // Open price
  //    double   high;         // The highest price of the period
  //    double   low;          // The lowest price of the period
  //    double   close;        // Close price
  //    long     tick_volume;  // Tick volume
  //    int      spread;       // Spread
  //    long     real_volume;  // Trade volume
  //   };

  MqlRates priceData[];   // create a price array

  // sort the array from the current candle downwards
  ArraySetAsSeries(priceData, true);

  // copy candle prices for 3 candles into array
  CopyRates(_Symbol,_Period,0,3,priceData);

  // create a counter for the candle
  static int candleCounter;

  // create Datetime variable for the last time stamp
  static datetime timeStampLastCheck;

  // create Datetime variable for current candle
  datetime timeStampCurrentCandle;

  // read time stamp for current candle in array
  timeStampCurrentCandle = priceData[0].time;

  // if the current time  stamp is different from last time
  if(timeStampCurrentCandle != timeStampLastCheck)
  {
     // remember current timestamp for next time
     timeStampLastCheck=timeStampCurrentCandle;
     
     // add 1 to the candleCounter
     candleCounter=candleCounter+1;
  }

  // Chart output
  Comment("Counted candles since start: ", candleCounter);
}
</code></pre>

<p>Compute the current Relative Strength Index (RSI)</p>
<pre><code class="language-c++">void OnTick()
{
  // create an Array for several prices
  double myRSIArray[];

  // define the properties of the RSI
  int myRSIDefinition = iRSI(_Symbol, _Period,14,PRICE_CLOSE);

  // sort the price array from the current candle downwards
  ArraySetAsSeries(myRSIArray,true);

  // Define EA, current candle, 3 candles, store result
  CopyBuffer(myRSIDefinition,0,0,3,myRSIArray);

  // Rounding floating point number to 2 digits
  Comment("myRSIValue: ", NormalizeDouble(myRSIArray[0],2));
}
</code></pre>

<p>Launch an action when the RSI value is below 30 AND the ASK price is below lower Bollinger Band</p>
<pre><code class="language-c++">void OnTick()
{
      Comment("");  // empty Chart output
      
      // create Array for RSI and 1 Bollinger Band
      double myRSIArray[], LowerBandArray[];
      
      // define RSI settings
      int myRSIDefinition = iRSI(_Symbol, _Period, 14, PRICE_CLOSE);
      
      // sort price data from current candle downwards
      ArraySetAsSeries(myRSIArray,true);
      
      // Define EA, current candle, 3 candles, save in Array
      CopyBuffer(myRSIDefinition,0,0,3,myRSIArray);
      
      // RSIValue for the current candle
      double myRSIValue=NormalizeDouble(myRSIArray[0],2);
      //----------------------------------------------------------------------------------------------------
      // sort price data from current candle downwards
      ArraySetAsSeries(LowerBandArray,true);
      
      // define Bollinger Bands
      int BollingerBandsDefinition=iBands(_Symbol, _Period,20,0,2,PRICE_CLOSE);
      
      // Copy price info the array
      // cf. doc: The buffer numbers are the following: 0 - BASE_LINE, 1 - UPPER_BAND, 2 - LOWER_BAND
      CopyBuffer(BollingerBandsDefinition,2,0,3,LowerBandArray);
      
      // calculate EA for the last candle
      double myLowerBandValue=LowerBandArray[1];
      
      // get the ask price
      double Ask=NormalizeDouble(SymbolInfoDouble(_Symbol,SYMBOL_ASK),_Digits);
      
      if (myRSIValue &lt; 30) // if RSI is below 30 AND ASK is below lower Bollinger Band
         if (Ask &lt; myLowerBandValue) 
            Comment("\n\n\n\n\n","OVERSOLD AND BELOW LOWER BAND");
}
</code></pre>

<p>Crossing moving average expert advisor</p>
<pre><code class="language-c++">void OnTick()
{
   // create an Array for several prices
   double myMovingAverage1[],myMovingAverage2[];
   
   // define the properties of the Moving Average1
   int movingAverageDefinition1 = iMA(_Symbol, _Period,20,0,MODE_EMA,PRICE_CLOSE);
   
   // define the properties of the Moving Average3
   int movingAverageDefinition2 = iMA(_Symbol, _Period,50,0,MODE_EMA,PRICE_CLOSE);
   
   // sort the price array1 form the current candle downwards
   ArraySetAsSeries(myMovingAverage1,true);
   
   // sort the price array2 form the current candle downwards
   ArraySetAsSeries(myMovingAverage2,true);
   
   // Define MA1, one line, current candle, 3 candles, store result
   CopyBuffer(movingAverageDefinition1,0,0,3,myMovingAverage1);
   
   // Define MA2, one line, current candle, 3 candles, store result
   CopyBuffer(movingAverageDefinition2,0,0,3,myMovingAverage2);
   
   if (// Check if the 20 candle EA is above the 50 candle EA
         (myMovingAverage1[0] &gt; myMovingAverage2[0])
      &amp;&amp; (myMovingAverage1[1] &lt; myMovingAverage2[1])
   ){
      Comment("BUY");
   } 
   
   if (// Check if the 50 candle EA is above the 20 candle EA
         (myMovingAverage1[0] &lt; myMovingAverage2[0])
      &amp;&amp; (myMovingAverage1[1] &gt; myMovingAverage2[1])
   ){
      Comment("SELL");
   } 
}
</code></pre>

<p>Simple momemtum expert advisor</p>
<pre><code class="language-c++">void OnTick()
  {
      // create an Array for several prices
      double myPriceArray[];
      
      // define the properties of the Momentum EA
      int iMomentumDefinition = iMomentum(_Symbol,_Period,14,PRICE_CLOSE);
      
      // sort the price array1 from the current candle downwards
      ArraySetAsSeries(myPriceArray, true);
      
      // Define MA1, one line, current candle 3 candles, store result
      CopyBuffer(iMomentumDefinition,0,0,3,myPriceArray);
      
      // Get the value of the current candle
      double myMomentumValue = NormalizeDouble(myPriceArray[0],2);
      
      // Chart output depending on the value
      if (myMomentumValue &gt; 100.0)
         Comment("STRONG MOMENTUM: ", myMomentumValue);
      if (myMomentumValue &lt; 99.9)
         Comment("WEAK MOMENTUM: ", myMomentumValue);
         
      if ((myMomentumValue &gt; 99.9) &amp;&amp; (myMomentumValue &lt; 100.0))
         Comment(" ", myMomentumValue);
}
</code></pre>

<p>Simple SAR (stop and reverse) expert advisor</p>
<pre><code class="language-c++">void OnTick()
  {
      // create an Array for several prices
      double mySARArray[];
      
      // define the properties of the SAR
      int SARDefinition = iSAR (_Symbol,_Period, 0.02, 0.2);
      
      // sort the price array from the current candle downwards
      ArraySetAsSeries(mySARArray, true);
      
      // Defined EA, current candle, 3 candles, store result
      CopyBuffer(SARDefinition, 0, 0, 3, mySARArray);
      
      // calculate EA for the current candle
      double SARValue=NormalizeDouble(mySARArray[0],5);
      
      // Chart output of the current EA
      Comment("SARValue: ", SARValue);
  }
</code></pre>

<p>Simple Williams Percent Range expert advisor</p>
<pre><code class="language-c++">void OnTick()
  {
      // create an Array for several prices
      double WPRArray[];
      
      // define the properties of the WPR, 14 is default value for this preonfigured indicator in MetaTrader
      int WPRDefinition = iWPR (_Symbol,_Period,100);
      
      // sort the price array from the current candle downwards
      ArraySetAsSeries(WPRArray,true);
      
      // Use the CopyBuffer function to fill our WPRArray
      // Defined EA, current candle, 3 candles, store result
      CopyBuffer(WPRDefinition,0,0,3,WPRArray);
      
      // calculate EA for the current candle
      double WPRValue = NormalizeDouble(WPRArray[0],2);
   
      // chart output of the current EA
      Comment("WPRValue: ", WPRValue);
  }
</code></pre>

<p>Standard deviation</p>
<pre><code class="language-c++">void OnTick()
  {
      // Create an Array for several prices
      double StdDevArray[];
      
      // define the properties of the StdDev
      int StdDevDefinition = iStdDev (_Symbol,_Period,20,0,MODE_SMA,PRICE_CLOSE);
      
      // sort the price array from the current candle downwards
      ArraySetAsSeries(StdDevArray, true);
      
      // Defined EA, current candle, 3 candles, store result
      CopyBuffer(StdDevDefinition, 0,0,3, StdDevArray);
      
      // calculate EA for the current candle
      double StdDevValue=NormalizeDouble(StdDevArray[0],6);
      
      // Chart output of the current EA
      Comment("StdDevValue: ", StdDevValue);
  }
</code></pre>

<ul>
  <li>Average True Range</li>
  <li>Standard Deviation</li>
  <li>Parabolic SAR</li>
  <li>Momentum</li>
  <li>Williams‚Äô Percent Range</li>
  <li>Adaptive Moving Average</li>
  <li>Average Directional Movement Index</li>
  <li>Average Directional Movement Index Wilder</li>
  <li>Envelopes</li>
  <li>Fractal Adaptative Moving Average</li>
  <li>Ichimoku Kinko Hyo</li>
  <li>Moving Average</li>
  <li>Parabolic SAR</li>
  <li>Standard Deviation</li>
  <li>Triple Exponential Moving Average</li>
  <li>Variable Index Dynamic Average
! Relative Strength Index</li>
</ul>
:ET